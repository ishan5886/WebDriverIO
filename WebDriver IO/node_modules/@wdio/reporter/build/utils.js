"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorsFromEvent = exports.sanitizeCaps = exports.sanitizeString = void 0;
/**
 * replaces whitespaces with underscore and removes dots
 * @param  {String} str  variable to sanitize
 * @return {String}      sanitized variable
 */
function sanitizeString(str) {
    if (!str) {
        return '';
    }
    return String(str)
        .replace(/^.*\/([^/]+)\/?$/, '$1')
        .replace(/\./g, '_')
        .replace(/\s/g, '')
        .toLowerCase();
}
exports.sanitizeString = sanitizeString;
/**
 * formats capability object into sanitized string for e.g.filenames
 * @param {Object} caps  Selenium capabilities
 */
function sanitizeCaps(caps) {
    if (!caps) {
        return '';
    }
    let result;
    /**
     * mobile caps
     */
    if (caps.deviceName) {
        result = [
            sanitizeString(caps.deviceName),
            sanitizeString(caps.platformName),
            sanitizeString(caps.platformVersion),
            sanitizeString(caps.app)
        ];
    }
    else {
        result = [
            sanitizeString(caps.browserName),
            sanitizeString(caps.version || caps.browserVersion),
            sanitizeString(caps.platform || caps.platformName),
            sanitizeString(caps.app)
        ];
    }
    result = result.filter(n => n !== undefined && n !== '');
    return result.join('.');
}
exports.sanitizeCaps = sanitizeCaps;
/**
 * Takes a event emitted by a framework and extracts
 * an array of errors representing test or hook failures.
 * This exists to maintain compatibility between frameworks
 * with have a soft assertion model (Jasmine) and those that
 * have a hard assertion model (Mocha)
 * @param {*} e  An event emitted by a framework adapter
 */
function getErrorsFromEvent(e) {
    if (e.errors)
        return e.errors;
    if (e.error)
        return [e.error];
    return [];
}
exports.getErrorsFromEvent = getErrorsFromEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUE7Ozs7R0FJRztBQUNILFNBQWdCLGNBQWMsQ0FBRSxHQUFZO0lBQ3hDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDTixPQUFPLEVBQUUsQ0FBQTtLQUNaO0lBRUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2IsT0FBTyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQztTQUNqQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztTQUNuQixPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztTQUNsQixXQUFXLEVBQUUsQ0FBQTtBQUN0QixDQUFDO0FBVkQsd0NBVUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUUsSUFBdUM7SUFDakUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNQLE9BQU8sRUFBRSxDQUFBO0tBQ1o7SUFFRCxJQUFJLE1BQU0sQ0FBQTtJQUVWOztPQUVHO0lBQ0gsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2pCLE1BQU0sR0FBRztZQUNMLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQy9CLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2pDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ3BDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQzNCLENBQUE7S0FDSjtTQUFNO1FBQ0gsTUFBTSxHQUFHO1lBQ0wsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDaEMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNuRCxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2xELGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQzNCLENBQUE7S0FDSjtJQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDeEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLENBQUM7QUE1QkQsb0NBNEJDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLENBQWdDO0lBQy9ELElBQUksQ0FBQyxDQUFDLE1BQU07UUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUE7SUFDN0IsSUFBSSxDQUFDLENBQUMsS0FBSztRQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDN0IsT0FBTyxFQUFFLENBQUE7QUFDYixDQUFDO0FBSkQsZ0RBSUMifQ==